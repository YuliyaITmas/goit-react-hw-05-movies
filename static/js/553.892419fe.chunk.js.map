{"version":3,"file":"static/js/553.892419fe.chunk.js","mappings":"kMAEaA,EAAYC,EAAAA,EAAAA,IAAH,yJASTC,EAAMD,EAAAA,EAAAA,IAAH,uD,SCKhB,EAXqB,SAAC,GAAe,IAAdE,EAAa,EAAbA,QACrB,OACE,UAACH,EAAD,YACE,SAACE,EAAD,CAAKE,I,y/UAAeC,IAAI,WACxB,uBAAIF,MAGT,C,sFCVKG,EAAAA,WACJ,aAA0D,IAA9CC,EAA6C,uDAApC,oCAAoC,eACvDC,KAAKD,OAASA,EACdC,KAAKC,QAAU,+BACfD,KAAKE,QAAU,CACbC,OAAQ,mBACRC,cAAc,6NAEjB,CAgED,OAhEC,4EAED,WAAwBC,GAAxB,4FAAiCC,EAAjC,+BAAwC,EAAxC,kBAE2BC,EAAAA,EAAAA,IAAA,UAClBP,KAAKC,QADa,kBACII,EADJ,2BAErB,CACEG,OAAQ,CAAEF,KAAAA,GACVJ,QAASF,KAAKE,UANtB,cAEUO,EAFV,yBAUWA,EAASC,MAVpB,sCAYU,IAAIC,MAAM,KAAMhB,SAZ1B,4GAFC,IAED,kEAgBA,WAAwBU,GAAxB,gGAE2BE,EAAAA,EAAAA,IAAA,UAClBP,KAAKC,QADa,kBACII,EADJ,2BAErB,CACEH,QAASF,KAAKE,UALtB,cAEUO,EAFV,yBASWA,EAASC,MATpB,sCAWU,IAAIC,MAAM,KAAMhB,SAX1B,4GAhBA,IAgBA,kEAeA,WAAwBU,GAAxB,gGAE2BE,EAAAA,EAAAA,IAAA,UAClBP,KAAKC,QADa,kBACII,EADJ,mBAErB,CACEH,QAASF,KAAKE,UALtB,cAEUO,EAFV,yBASWA,EAASC,MATpB,sCAWU,IAAIC,MAAM,KAAMhB,SAX1B,4GAfA,IAeA,6DAeA,WAAmBiB,GAAnB,4FAA0BN,EAA1B,+BAAiC,EAAjC,kBAE2BC,EAAAA,EAAAA,IAAA,UAClBP,KAAKC,QADa,oDAErB,CACEO,OAAQ,CAAEI,MAAAA,EAAON,KAAAA,GACjBJ,QAASF,KAAKE,UANtB,cAEUO,EAFV,yBAUWA,EAASC,MAVpB,sCAYU,IAAIC,MAAM,KAAMhB,SAZ1B,4GAfA,IAeA,oEAgBA,6GAE2BY,EAAAA,EAAAA,IAAA,UAClBP,KAAKC,QADa,oCAErB,CACEC,QAASF,KAAKE,UALtB,cAEUO,EAFV,yBASWA,EAASC,MATpB,sCAWU,IAAIC,MAAM,KAAMhB,SAX1B,2GAhBA,MAgBA,EAxEIG,GAwFN,K","sources":["components/ErrorMessage/ErrorMessage.styled.jsx","components/ErrorMessage/ErrorMessage.jsx","components/services/getMovies.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ErrorWrap = styled.div`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-size: 36px;\ncolor: #f44336;\n// text-transform: uppercase;\n`;\n\nexport const Img = styled.img`\nwidth: 100%;\nheight: auto;\n\n`;","\nimport PropTypes from 'prop-types';\nimport { ErrorWrap, Img } from './ErrorMessage.styled';\nimport  errorIMG from 'components/errorIMG.png';\n\nconst ErrorMessage = ({message}) => {\n  return (\n    <ErrorWrap>\n      <Img src={errorIMG} alt=\"error\" />\n      <p>{message}</p>\n    </ErrorWrap>\n  );\n};\nErrorMessage.propTypes = {\n  message: PropTypes.string,\n}\nexport default ErrorMessage;\n\n","import axios from 'axios';\n\nclass MovieAPI {\n  constructor(apiKey = 'cb85d4ca8ccc21148aa431fcbda6fed6') {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://api.themoviedb.org/3';\n    this.headers = {\n      accept: 'application/json',\n      Authorization: `Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJjYjg1ZDRjYThjY2MyMTE0OGFhNDMxZmNiZGE2ZmVkNiIsInN1YiI6IjY0NzA5MTAwMTNhMzIwMDExNmI2OTljZiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.elM55nFlhNCZrZUR2Hlm6sqxpk_Q0C6eFSXrdeKsuk8`,\n    };\n  }\n\n  async fetchMovieReviews(movieId, page = 1) {\n    try {\n      const response = await axios.get(\n        `${this.baseURL}/movie/${movieId}/reviews?language=en-US`,\n        {\n          params: { page },\n          headers: this.headers,\n        }\n      );\n\n      return response.data;\n    } catch (error) {\n      throw new Error(error.message);\n    }\n  }\n\n  async fetchMovieCredits(movieId) {\n    try {\n      const response = await axios.get(\n        `${this.baseURL}/movie/${movieId}/credits?language=en-US`,\n        {\n          headers: this.headers,\n        }\n      );\n\n      return response.data;\n    } catch (error) {\n      throw new Error(error.message);\n    }\n  }\n\n  async fetchMovieDetails(movieId) {\n    try {\n      const response = await axios.get(\n        `${this.baseURL}/movie/${movieId}?language=en-US`,\n        {\n          headers: this.headers,\n        }\n      );\n\n      return response.data;\n    } catch (error) {\n      throw new Error(error.message);\n    }\n  }\n\n  async searchMovies(query, page = 1) {\n    try {\n      const response = await axios.get(\n        `${this.baseURL}/search/movie?include_adult=false&language=en-US`,\n        {\n          params: { query, page },\n          headers: this.headers,\n        }\n      );\n\n      return response.data;\n    } catch (error) {\n      throw new Error(error.message);\n    }\n  }\n\n  async fetchTrendingMovies() {\n    try {\n      const response = await axios.get(\n        `${this.baseURL}/trending/all/day?language=en-US`,\n        {\n          headers: this.headers,\n        }\n      );\n\n      return response.data;\n    } catch (error) {\n      throw new Error(error.message);\n    }\n  }\n}\n\nexport default MovieAPI;\n"],"names":["ErrorWrap","styled","Img","message","src","alt","MovieAPI","apiKey","this","baseURL","headers","accept","Authorization","movieId","page","axios","params","response","data","Error","query"],"sourceRoot":""}