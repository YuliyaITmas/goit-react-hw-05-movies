{"version":3,"file":"static/js/326.d7fde908.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/ErrorMessage/ErrorMessage.styled.jsx","components/ErrorMessage/ErrorMessage.jsx","components/services/getMovies.js"],"sourcesContent":["import styled from 'styled-components';\n\n\nexport const CastWrap = styled.div`\n  margin-top: 20px;\n`;\n\nexport const CastTitle = styled.h2`\n   font-size: 18px;\n  margin-bottom: 10px;\n}\n`;\nexport const CastList = styled.ul`\n  margin-bottom: 10px;\n  display: flex;\n  flex-direction: column;\n`;\nexport const CastItem = styled.li`\n   display: flex;\n   flex-direction: column;\n  align-items: center;\n  margin-bottom: 20px;\n}\n`;\nexport const CastPicture = styled.img`\n   width: 160px;\n  height: auto;\n  object-fit: cover;\n  margin-right: 10px;\n  margin-bottom: 10px;\n}\n`;\nexport const CastName = styled.h4`\n font-size: 16px;\n  margin-bottom: 5px;\n}\n`;\n\nexport const CastCharacter = styled.p`\n  font-size: 14px;\n  margin-bottom: 5px;\n`;\n","\n\nimport ErrorMessage from 'components/ErrorMessage/ErrorMessage';\nimport Loader from 'components/Loader/Loader';\nimport MovieAPI from 'components/services/getMovies';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  CastItem,\n  CastTitle,\n  CastWrap,\n  CastPicture,\n  CastName,\n  CastCharacter,\n  CastList,\n} from './Cast.styled';\nimport notFound from'components/ nofoundimage.jpeg'\n\n\n\n\n\nconst movieAPI = new MovieAPI();\n\nconst Status = {\n  IDLE: 'idle',\n  PENDING: 'pending',\n  RESOLVED: 'resolved',\n  REJECTED: 'rejected',\n};\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [status, setStatus] = useState(Status.IDLE);\n   const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      setStatus(Status.PENDING);\n      try {\n        const response = await movieAPI.fetchMovieCredits(movieId);\n        setCast(response.cast);\n        setStatus(Status.RESOLVED);\n      } catch (error) {\n        setStatus(Status.REJECTED);\n          setError(error);\n      }\n    };\n\n    fetchCast();\n  }, [movieId]);\n\n  if (status === Status.IDLE || status === Status.PENDING) {\n    return <Loader/>;\n  }\nif (status === Status.REJECTED) {\n  return <ErrorMessage message={error.message} />;\n}\n\nif (cast.length === 0) {\n  return <div>No cast information available.</div>;\n}\n  if (status === Status.RESOLVED) {\n    return (\n      <CastWrap>\n        <CastTitle>Cast:</CastTitle>\n        <CastList>\n          {cast.map(actor => (\n            <CastItem key={actor.id}>\n              <CastPicture\n                src={\n                  actor.profile_path\n                    ? `https://image.tmdb.org/t/p/w500${actor.profile_path}`\n                    : `${notFound}`\n                }\n                alt={actor.name}\n              />\n              <CastName>{actor.name}</CastName>\n             { `${actor.character}` && <CastCharacter>Character: {actor.character}</CastCharacter>}\n            </CastItem>\n          ))}\n        </CastList>\n      </CastWrap>\n    );\n  }\n};\n\nexport default Cast;\n","import styled from '@emotion/styled';\n\nexport const ErrorWrap = styled.div`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-size: 36px;\ncolor: #f44336;\n// text-transform: uppercase;\n`;\n\nexport const Img = styled.img`\nwidth: 100%;\nheight: auto;\n\n`;","\nimport PropTypes from 'prop-types';\nimport { ErrorWrap, Img } from './ErrorMessage.styled';\nimport  errorIMG from 'components/errorIMG.jpeg';\n\nconst ErrorMessage = ({message}) => {\n  return (\n    <ErrorWrap>\n      <Img src={errorIMG} alt=\"error\" />\n      <p>{message}</p>\n    </ErrorWrap>\n  );\n};\nErrorMessage.propTypes = {\n  message: PropTypes.string,\n}\nexport default ErrorMessage;\n\n","import axios from 'axios';\n\nclass MovieAPI {\n  constructor(apiKey = 'cb85d4ca8ccc21148aa431fcbda6fed6') {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://api.themoviedb.org/3';\n    this.headers = {\n      accept: 'application/json',\n      Authorization: `Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJjYjg1ZDRjYThjY2MyMTE0OGFhNDMxZmNiZGE2ZmVkNiIsInN1YiI6IjY0NzA5MTAwMTNhMzIwMDExNmI2OTljZiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.elM55nFlhNCZrZUR2Hlm6sqxpk_Q0C6eFSXrdeKsuk8`,\n    };\n  }\n\n  async fetchMovieReviews(movieId, page = 1) {\n    try {\n      const response = await axios.get(\n        `${this.baseURL}/movie/${movieId}/reviews?language=en-US`,\n        {\n          params: { page },\n          headers: this.headers,\n        }\n      );\n\n      return response.data;\n    } catch (error) {\n      throw new Error(error.message);\n    }\n  }\n\n  async fetchMovieCredits(movieId) {\n    try {\n      const response = await axios.get(\n        `${this.baseURL}/movie/${movieId}/credits?language=en-US`,\n        {\n          headers: this.headers,\n        }\n      );\n\n      return response.data;\n    } catch (error) {\n      throw new Error(error.message);\n    }\n  }\n\n  async fetchMovieDetails(movieId) {\n    try {\n      const response = await axios.get(\n        `${this.baseURL}/movie/${movieId}?language=en-US`,\n        {\n          headers: this.headers,\n        }\n      );\n\n      return response.data;\n    } catch (error) {\n      throw new Error(error.message);\n    }\n  }\n\n  async searchMovies(query, page = 1) {\n    try {\n      const response = await axios.get(\n        `${this.baseURL}/search/movie?include_adult=false&language=en-US`,\n        {\n          params: { query, page },\n          headers: this.headers,\n        }\n      );\n\n      return response.data;\n    } catch (error) {\n      throw new Error(error.message);\n    }\n  }\n\n  async fetchTrendingMovies() {\n    try {\n      const response = await axios.get(\n        `${this.baseURL}/trending/all/day?language=en-US`,\n        {\n          headers: this.headers,\n        }\n      );\n\n      return response.data;\n    } catch (error) {\n      throw new Error(error.message);\n    }\n  }\n}\n\nexport default MovieAPI;\n"],"names":["CastWrap","styled","CastTitle","CastList","CastItem","CastPicture","CastName","CastCharacter","movieAPI","MovieAPI","Status","movieId","useParams","useState","cast","setCast","status","setStatus","error","setError","useEffect","fetchCast","fetchMovieCredits","response","Loader","ErrorMessage","message","length","map","actor","src","profile_path","notFound","alt","name","character","id","ErrorWrap","Img","errorIMG","apiKey","this","baseURL","headers","accept","Authorization","page","axios","params","data","Error","query"],"sourceRoot":""}