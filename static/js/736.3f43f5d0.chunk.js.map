{"version":3,"file":"static/js/736.3f43f5d0.chunk.js","mappings":"kTAGaA,EAAWC,EAAAA,GAAAA,IAAH,6CAIRC,EAAYD,EAAAA,GAAAA,GAAH,wEAKTE,EAAWF,EAAAA,GAAAA,GAAH,6FAKRG,EAAWH,EAAAA,GAAAA,GAAH,0HAORI,EAAcJ,EAAAA,GAAAA,IAAH,mIAQXK,EAAWL,EAAAA,GAAAA,GAAH,qEAMRM,EAAgBN,EAAAA,GAAAA,EAAH,mE,mBChBpBO,EAAW,IAAIC,EAAAA,EAEfC,EACE,OADFA,EAEK,UAFLA,EAGM,WAHNA,EAIM,WA4DZ,EAzDa,WACX,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAASH,GAArC,eAAOM,EAAP,KAAeC,EAAf,KACC,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAkBD,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,2FAChBJ,EAAUP,GADM,kBAGSF,EAASc,kBAAkBX,GAHpC,OAGRY,EAHQ,OAIdR,EAAQQ,EAAST,MACjBG,EAAUP,GALI,gDAOdO,EAAUP,GACRS,EAAS,EAAD,IARI,yDAAH,qDAYfE,GACD,GAAE,CAACV,IAEAK,IAAWN,GAAeM,IAAWN,GAChC,SAACc,EAAA,EAAD,IAEPR,IAAWN,GACN,SAACe,EAAA,EAAD,CAAcC,QAASR,EAAMQ,UAGlB,IAAhBZ,EAAKa,QACA,yBAAK,mCAERX,IAAWN,GAEX,UAACV,EAAD,YACE,SAACE,EAAD,UAAW,WACX,SAACC,EAAD,UACGW,EAAKc,KAAI,SAAAC,GAAK,OACb,UAACzB,EAAD,YACE,SAACC,EAAD,CACEyB,IACED,EAAME,aAAN,yCACsCF,EAAME,cAD5C,UAEOC,GAETC,IAAKJ,EAAMK,QAEb,SAAC5B,EAAD,UAAWuB,EAAMK,OAChB,UAAGL,EAAMM,aAAe,UAAC5B,EAAD,WAAe,cAAYsB,EAAMM,eAV7CN,EAAMO,GADR,cALvB,CAuBD,C","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import styled from 'styled-components';\n\n\nexport const CastWrap = styled.div`\n  margin-top: 20px;\n`;\n\nexport const CastTitle = styled.h2`\n   font-size: 18px;\n  margin-bottom: 10px;\n}\n`;\nexport const CastList = styled.ul`\n  margin-bottom: 10px;\n  display: flex;\n  flex-direction: column;\n`;\nexport const CastItem = styled.li`\n   display: flex;\n   flex-direction: column;\n  align-items: center;\n  margin-bottom: 20px;\n}\n`;\nexport const CastPicture = styled.img`\n   width: 160px;\n  height: auto;\n  object-fit: cover;\n  margin-right: 10px;\n  margin-bottom: 10px;\n}\n`;\nexport const CastName = styled.h4`\n font-size: 16px;\n  margin-bottom: 5px;\n}\n`;\n\nexport const CastCharacter = styled.p`\n  font-size: 14px;\n  margin-bottom: 5px;\n`;\n","\n\nimport ErrorMessage from 'components/ErrorMessage/ErrorMessage';\nimport Loader from 'components/Loader/Loader';\nimport MovieAPI from 'components/services/getMovies';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  CastItem,\n  CastTitle,\n  CastWrap,\n  CastPicture,\n  CastName,\n  CastCharacter,\n  CastList,\n} from './Cast.styled';\nimport notFound from'components/ nofoundimage.jpeg'\n\n\n\n\n\nconst movieAPI = new MovieAPI();\n\nconst Status = {\n  IDLE: 'idle',\n  PENDING: 'pending',\n  RESOLVED: 'resolved',\n  REJECTED: 'rejected',\n};\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [status, setStatus] = useState(Status.IDLE);\n   const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      setStatus(Status.PENDING);\n      try {\n        const response = await movieAPI.fetchMovieCredits(movieId);\n        setCast(response.cast);\n        setStatus(Status.RESOLVED);\n      } catch (error) {\n        setStatus(Status.REJECTED);\n          setError(error);\n      }\n    };\n\n    fetchCast();\n  }, [movieId]);\n\n  if (status === Status.IDLE || status === Status.PENDING) {\n    return <Loader/>;\n  }\nif (status === Status.REJECTED) {\n  return <ErrorMessage message={error.message} />;\n}\n\nif (cast.length === 0) {\n  return <div>No cast information available.</div>;\n}\n  if (status === Status.RESOLVED) {\n    return (\n      <CastWrap>\n        <CastTitle>Cast:</CastTitle>\n        <CastList>\n          {cast.map(actor => (\n            <CastItem key={actor.id}>\n              <CastPicture\n                src={\n                  actor.profile_path\n                    ? `https://image.tmdb.org/t/p/w500${actor.profile_path}`\n                    : `${notFound}`\n                }\n                alt={actor.name}\n              />\n              <CastName>{actor.name}</CastName>\n             { `${actor.character}` && <CastCharacter>Character: {actor.character}</CastCharacter>}\n            </CastItem>\n          ))}\n        </CastList>\n      </CastWrap>\n    );\n  }\n};\n\nexport default Cast;\n"],"names":["CastWrap","styled","CastTitle","CastList","CastItem","CastPicture","CastName","CastCharacter","movieAPI","MovieAPI","Status","movieId","useParams","useState","cast","setCast","status","setStatus","error","setError","useEffect","fetchCast","fetchMovieCredits","response","Loader","ErrorMessage","message","length","map","actor","src","profile_path","notFound","alt","name","character","id"],"sourceRoot":""}